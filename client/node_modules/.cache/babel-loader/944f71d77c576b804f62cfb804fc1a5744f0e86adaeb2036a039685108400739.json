{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nconst TransactionsByStore = () => {\n  _s();\n  const [shop, setShop] = useState(null);\n  const [clients, setClients] = useState(null);\n  const [filteredTransactions, setFilteredTransactions] = useState([]);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    fetch(\"/check_store_session\").then(resp => {\n      if (resp.ok) {\n        resp.json().then(store => setShop(store));\n      }\n    });\n  }, []);\n\n  // Check if shop is null or undefined\n\n  // Check if transactions is null or undefined\n  const trans = (shop === null || shop === void 0 ? void 0 : shop.transactions) || [];\n  //-----------------------------------------------------------------------------------------------------------------\n\n  useEffect(() => {\n    fetch('/clients').then(resp => resp.json()).then(data => setClients(data)).finally(() => setLoading(false));\n  }, []);\n\n  //-----------------------------------------------------------------------------------------------------------------\n\n  useEffect(() => {\n    if (!shop || loading) {\n      return;\n    }\n    const trans = shop.transactions || [];\n    const allTransactions = clients === null || clients === void 0 ? void 0 : clients.reduce((acc, client) => acc.concat(client.transactions), []);\n    const filtered = allTransactions === null || allTransactions === void 0 ? void 0 : allTransactions.filter(transaction => {\n      return transaction.store.name === shop.name;\n    });\n\n    // Convert goods_service_names from string to array\n    const transactionsWithArray = filtered === null || filtered === void 0 ? void 0 : filtered.map(transaction => ({\n      ...transaction,\n      goods_service_names: transaction.goods_service_names ? transaction.goods_service_names.split(', ') : []\n    }));\n    setFilteredTransactions(transactionsWithArray);\n  }, [shop, clients, loading]);\n};\n_s(TransactionsByStore, \"invSi6RDNgetS7n+YlKYuRpzdTg=\");\n_c = TransactionsByStore;\nexport default TransactionsByStore;\nconsole.log();\n\n//   useEffect(() => {\n//     // Check if shop is null or undefined\n//     if (!shop || loading) {\n//       return; \n//     }\n\n//     const trans = shop.transactions || [];\n\n//     const allTransactions = clients?.reduce((acc, client) => acc.concat(client.transactions), []);\n//     console.log(allTransactions)\n\n//     // Now you can filter the transactions based on your criteria\n//     const filtered = allTransactions?.filter(transaction => {\n//         const name = transaction?.goods_service_names.split(', ') || []\n//       return transaction.goods_service_names.split(', ') === shop.name;\n//     });\n//     console.log(filtered);\n\n//     setFilteredTransactions(filtered);\n//   }, [shop, clients]);\n\n//   console.log(filteredTransactions)\n\n//   return (\n//     <div align='center' className='storess'>\n//       <h2>Transactions for {shop ? shop.name : \"\"}</h2>\n//       <ul>\n//         {trans.map((tran) => (\n//           <p key={tran.id}>\n//             <p>Client: {tran.client.name}</p>\n//             <p>Email: {tran.client.email}</p>\n//             <p>Total Amount: {tran.total_amount}</p>\n//           </p>\n//         ))}\n//       </ul>\n//     </div>\n//   );\n// };\n\n// export default TransactionsByStore;\n\n//   const [shop, setShop] = useState(null);\n//   const [carts, setCarts] = useState(null);\n\n//   useEffect(() => {\n//     const fetchData = async () => {\n//       try {\n//         const response = await fetch(\"/check_store_session\");\n//         if (response.ok) {\n//           const store = await response.json();\n//           setShop(store);\n\n//           // Assuming there is a carts endpoint, fetch cart data here\n//           const cartsResponse = await fetch(\"/carts\");\n//           if (cartsResponse.ok) {\n//             const cartData = await cartsResponse.json();\n//             setCarts(cartData.carts);\n//           }\n//         }\n//       } catch (error) {\n//         console.error('Error fetching store data:', error);\n//       }\n//     };\n\n//     fetchData();\n//   }, []);\n\n//   // Check if shop or carts is null or undefined\n//   if (!shop || !carts) {\n//     return <p>Loading...</p>; // You might want to display a loading indicator\n//   }\n\n//   // Check if transactions is null or undefined\n//   const transactions = shop.transactions || [];\n//   console.log(shop.goods_services);\n\n//   // Map over goods_services and filter the cart by goods_service_id\n//   const goodsServicesWithCart = shop.goods_services.map((goodsService) => {\n//     const cartForGoodsService = carts.find((cart) => cart.goods_service_id === goodsService.id);\n//     return {\n//       ...goodsService,\n//       cart: cartForGoodsService || null,\n//     };\n//   });\n\n//   return (\n//     <div align='center' className='storess'>\n//       <h2>Transactions for {shop ? shop.name : \"\"}</h2>\n//       {transactions.map((transaction) => (\n//         <div key={transaction.id}>\n//           <div><b>Client:</b> {transaction.client.name}</div>\n//           <div><b>Email:</b> {transaction.client.email}</div>\n//           <div><b>Total Amount:</b> ${transaction.total_amount.toFixed(2)}</div>\n//           {/* Add more details as needed */}\n//           <br />\n//           {/* Format date similar to ClientTransactions component */}\n//           <div><b>Date/Time:</b> {new Date(transaction.timestamp).toLocaleString('en-US', {\n//             year: 'numeric',\n//             month: 'numeric',\n//             day: 'numeric',\n//             hour: 'numeric',\n//             minute: 'numeric',\n//             hour12: true,\n//             timeZone: 'America/New_York',\n//           })}</div>\n//           <div>-----------------------------------------------------------------</div>\n//           <div>-------------------------------------------------------------------------</div>\n//           <br />\n//           <br />\n//         </div>\n//       ))}\n\n//       {goodsServicesWithCart.map((goodsService) => (\n//         <div key={goodsService.id}>\n//           <h3>{goodsService.name}</h3>\n//           <p>Price: ${goodsService.price.toFixed(2)}</p>\n//           {goodsService.cart && (\n//             <p>Cart Information: {/* Render cart details from goodsService.cart */}</p>\n//           )}\n//           <hr />\n//         </div>\n//       ))}\n//     </div>\n//   );\n// };\nvar _c;\n$RefreshReg$(_c, \"TransactionsByStore\");","map":{"version":3,"names":["React","useState","useEffect","TransactionsByStore","_s","shop","setShop","clients","setClients","filteredTransactions","setFilteredTransactions","loading","setLoading","fetch","then","resp","ok","json","store","trans","transactions","data","finally","allTransactions","reduce","acc","client","concat","filtered","filter","transaction","name","transactionsWithArray","map","goods_service_names","split","_c","console","log","$RefreshReg$"],"sources":["/home/lebowski/Development/code/phase-5/project-community-connex/client/src/components/TransactionsByStore.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nconst TransactionsByStore = () => {\n\n  const [shop, setShop] = useState(null);\n  const [clients, setClients] = useState(null)\n  const [filteredTransactions, setFilteredTransactions] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    fetch(\"/check_store_session\").then((resp) => {\n      if (resp.ok) {\n        resp.json().then((store) => setShop(store));\n      }\n    });\n  }, []);\n\n  // Check if shop is null or undefined\n\n\n\n  // Check if transactions is null or undefined\n  const trans = shop?.transactions || [];\n  //-----------------------------------------------------------------------------------------------------------------\n\n  useEffect(() => {\n    fetch('/clients')\n      .then((resp) => resp.json())\n      .then((data) => setClients(data))\n      .finally(() => setLoading(false));\n  }, [])\n\n\n  //-----------------------------------------------------------------------------------------------------------------\n\n  useEffect(() => {\n    if (!shop || loading) {\n      return;\n    }\n\n    const trans = shop.transactions || [];\n    const allTransactions = clients?.reduce(\n      (acc, client) => acc.concat(client.transactions),\n      []\n    );\n    \n    const filtered = allTransactions?.filter((transaction) => {\n      return transaction.store.name === shop.name;\n    });\n    \n    // Convert goods_service_names from string to array\n    const transactionsWithArray = filtered?.map((transaction) => ({\n      ...transaction,\n      goods_service_names: transaction.goods_service_names\n      ? transaction.goods_service_names.split(', ')\n      : [],\n    }));\n    \n    setFilteredTransactions(transactionsWithArray);\n  }, [shop, clients, loading]);\n}\nexport default TransactionsByStore;\n\nconsole.log()\n  \n//   useEffect(() => {\n//     // Check if shop is null or undefined\n//     if (!shop || loading) {\n//       return; \n//     }\n\n//     const trans = shop.transactions || [];\n\n//     const allTransactions = clients?.reduce((acc, client) => acc.concat(client.transactions), []);\n//     console.log(allTransactions)\n\n//     // Now you can filter the transactions based on your criteria\n//     const filtered = allTransactions?.filter(transaction => {\n//         const name = transaction?.goods_service_names.split(', ') || []\n//       return transaction.goods_service_names.split(', ') === shop.name;\n//     });\n//     console.log(filtered);\n\n//     setFilteredTransactions(filtered);\n//   }, [shop, clients]);\n\n//   console.log(filteredTransactions)\n\n//   return (\n//     <div align='center' className='storess'>\n//       <h2>Transactions for {shop ? shop.name : \"\"}</h2>\n//       <ul>\n//         {trans.map((tran) => (\n//           <p key={tran.id}>\n//             <p>Client: {tran.client.name}</p>\n//             <p>Email: {tran.client.email}</p>\n//             <p>Total Amount: {tran.total_amount}</p>\n//           </p>\n//         ))}\n//       </ul>\n//     </div>\n//   );\n// };\n\n// export default TransactionsByStore;\n\n//   const [shop, setShop] = useState(null);\n//   const [carts, setCarts] = useState(null);\n\n//   useEffect(() => {\n//     const fetchData = async () => {\n//       try {\n//         const response = await fetch(\"/check_store_session\");\n//         if (response.ok) {\n//           const store = await response.json();\n//           setShop(store);\n\n//           // Assuming there is a carts endpoint, fetch cart data here\n//           const cartsResponse = await fetch(\"/carts\");\n//           if (cartsResponse.ok) {\n//             const cartData = await cartsResponse.json();\n//             setCarts(cartData.carts);\n//           }\n//         }\n//       } catch (error) {\n//         console.error('Error fetching store data:', error);\n//       }\n//     };\n\n//     fetchData();\n//   }, []);\n\n//   // Check if shop or carts is null or undefined\n//   if (!shop || !carts) {\n//     return <p>Loading...</p>; // You might want to display a loading indicator\n//   }\n\n//   // Check if transactions is null or undefined\n//   const transactions = shop.transactions || [];\n//   console.log(shop.goods_services);\n\n//   // Map over goods_services and filter the cart by goods_service_id\n//   const goodsServicesWithCart = shop.goods_services.map((goodsService) => {\n//     const cartForGoodsService = carts.find((cart) => cart.goods_service_id === goodsService.id);\n//     return {\n//       ...goodsService,\n//       cart: cartForGoodsService || null,\n//     };\n//   });\n\n//   return (\n//     <div align='center' className='storess'>\n//       <h2>Transactions for {shop ? shop.name : \"\"}</h2>\n//       {transactions.map((transaction) => (\n//         <div key={transaction.id}>\n//           <div><b>Client:</b> {transaction.client.name}</div>\n//           <div><b>Email:</b> {transaction.client.email}</div>\n//           <div><b>Total Amount:</b> ${transaction.total_amount.toFixed(2)}</div>\n//           {/* Add more details as needed */}\n//           <br />\n//           {/* Format date similar to ClientTransactions component */}\n//           <div><b>Date/Time:</b> {new Date(transaction.timestamp).toLocaleString('en-US', {\n//             year: 'numeric',\n//             month: 'numeric',\n//             day: 'numeric',\n//             hour: 'numeric',\n//             minute: 'numeric',\n//             hour12: true,\n//             timeZone: 'America/New_York',\n//           })}</div>\n//           <div>-----------------------------------------------------------------</div>\n//           <div>-------------------------------------------------------------------------</div>\n//           <br />\n//           <br />\n//         </div>\n//       ))}\n\n//       {goodsServicesWithCart.map((goodsService) => (\n//         <div key={goodsService.id}>\n//           <h3>{goodsService.name}</h3>\n//           <p>Price: ${goodsService.price.toFixed(2)}</p>\n//           {goodsService.cart && (\n//             <p>Cart Information: {/* Render cart details from goodsService.cart */}</p>\n//           )}\n//           <hr />\n//         </div>\n//       ))}\n//     </div>\n//   );\n// };"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAElD,MAAMC,mBAAmB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAEhC,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGL,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACM,OAAO,EAAEC,UAAU,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACQ,oBAAoB,EAAEC,uBAAuB,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EACpE,MAAM,CAACU,OAAO,EAAEC,UAAU,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EAE5CC,SAAS,CAAC,MAAM;IACdW,KAAK,CAAC,sBAAsB,CAAC,CAACC,IAAI,CAAEC,IAAI,IAAK;MAC3C,IAAIA,IAAI,CAACC,EAAE,EAAE;QACXD,IAAI,CAACE,IAAI,CAAC,CAAC,CAACH,IAAI,CAAEI,KAAK,IAAKZ,OAAO,CAACY,KAAK,CAAC,CAAC;MAC7C;IACF,CAAC,CAAC;EACJ,CAAC,EAAE,EAAE,CAAC;;EAEN;;EAIA;EACA,MAAMC,KAAK,GAAG,CAAAd,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEe,YAAY,KAAI,EAAE;EACtC;;EAEAlB,SAAS,CAAC,MAAM;IACdW,KAAK,CAAC,UAAU,CAAC,CACdC,IAAI,CAAEC,IAAI,IAAKA,IAAI,CAACE,IAAI,CAAC,CAAC,CAAC,CAC3BH,IAAI,CAAEO,IAAI,IAAKb,UAAU,CAACa,IAAI,CAAC,CAAC,CAChCC,OAAO,CAAC,MAAMV,UAAU,CAAC,KAAK,CAAC,CAAC;EACrC,CAAC,EAAE,EAAE,CAAC;;EAGN;;EAEAV,SAAS,CAAC,MAAM;IACd,IAAI,CAACG,IAAI,IAAIM,OAAO,EAAE;MACpB;IACF;IAEA,MAAMQ,KAAK,GAAGd,IAAI,CAACe,YAAY,IAAI,EAAE;IACrC,MAAMG,eAAe,GAAGhB,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEiB,MAAM,CACrC,CAACC,GAAG,EAAEC,MAAM,KAAKD,GAAG,CAACE,MAAM,CAACD,MAAM,CAACN,YAAY,CAAC,EAChD,EACF,CAAC;IAED,MAAMQ,QAAQ,GAAGL,eAAe,aAAfA,eAAe,uBAAfA,eAAe,CAAEM,MAAM,CAAEC,WAAW,IAAK;MACxD,OAAOA,WAAW,CAACZ,KAAK,CAACa,IAAI,KAAK1B,IAAI,CAAC0B,IAAI;IAC7C,CAAC,CAAC;;IAEF;IACA,MAAMC,qBAAqB,GAAGJ,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAEK,GAAG,CAAEH,WAAW,KAAM;MAC5D,GAAGA,WAAW;MACdI,mBAAmB,EAAEJ,WAAW,CAACI,mBAAmB,GAClDJ,WAAW,CAACI,mBAAmB,CAACC,KAAK,CAAC,IAAI,CAAC,GAC3C;IACJ,CAAC,CAAC,CAAC;IAEHzB,uBAAuB,CAACsB,qBAAqB,CAAC;EAChD,CAAC,EAAE,CAAC3B,IAAI,EAAEE,OAAO,EAAEI,OAAO,CAAC,CAAC;AAC9B,CAAC;AAAAP,EAAA,CA1DKD,mBAAmB;AAAAiC,EAAA,GAAnBjC,mBAAmB;AA2DzB,eAAeA,mBAAmB;AAElCkC,OAAO,CAACC,GAAG,CAAC,CAAC;;AAEb},"metadata":{},"sourceType":"module","externalDependencies":[]}