{"ast":null,"code":"var _jsxFileName = \"/home/lebowski/Development/code/phase-5/project-community-connex/client/src/components/TransactionsByStore.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TransactionsByStore = () => {\n  _s();\n  const [shop, setShop] = useState(null);\n  useEffect(() => {\n    fetch(\"/check_store_session\").then(resp => {\n      if (resp.ok) {\n        resp.json().then(store => setShop(store));\n      }\n    });\n  }, []);\n\n  // Check if shop is null or undefined\n  if (!shop) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 12\n    }, this); // You might want to display a loading indicator\n  }\n\n  // Check if transactions is null or undefined\n  const trans = shop.transactions || [];\n  useEffect(() => {\n    // Flatten the array of transactions for all clients\n    const allTransactions = clients.reduce((acc, client) => acc.concat(client.transactions), []);\n\n    // Now you can filter the transactions based on your criteria\n    const filtered = allTransactions.filter(transaction => {\n      // Your filtering logic here\n      // For example, filter transactions with a total amount greater than 500\n      return transaction.total_amount > 500;\n    });\n    setFilteredTransactions(filtered);\n  }, [clients]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    align: \"center\",\n    className: \"storess\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Transactions for \", shop ? shop.name : \"\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: trans.map(tran => /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Client: \", tran.client.name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Email: \", tran.client.email]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Total Amount: \", tran.total_amount]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 13\n        }, this)]\n      }, tran.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n};\n_s(TransactionsByStore, \"A6vbaIs3osKlk7hlhJa3AdHpyyk=\");\n_c = TransactionsByStore;\nexport default TransactionsByStore;\n\n//   const [shop, setShop] = useState(null);\n//   const [carts, setCarts] = useState(null);\n\n//   useEffect(() => {\n//     const fetchData = async () => {\n//       try {\n//         const response = await fetch(\"/check_store_session\");\n//         if (response.ok) {\n//           const store = await response.json();\n//           setShop(store);\n\n//           // Assuming there is a carts endpoint, fetch cart data here\n//           const cartsResponse = await fetch(\"/carts\");\n//           if (cartsResponse.ok) {\n//             const cartData = await cartsResponse.json();\n//             setCarts(cartData.carts);\n//           }\n//         }\n//       } catch (error) {\n//         console.error('Error fetching store data:', error);\n//       }\n//     };\n\n//     fetchData();\n//   }, []);\n\n//   // Check if shop or carts is null or undefined\n//   if (!shop || !carts) {\n//     return <p>Loading...</p>; // You might want to display a loading indicator\n//   }\n\n//   // Check if transactions is null or undefined\n//   const transactions = shop.transactions || [];\n//   console.log(shop.goods_services);\n\n//   // Map over goods_services and filter the cart by goods_service_id\n//   const goodsServicesWithCart = shop.goods_services.map((goodsService) => {\n//     const cartForGoodsService = carts.find((cart) => cart.goods_service_id === goodsService.id);\n//     return {\n//       ...goodsService,\n//       cart: cartForGoodsService || null,\n//     };\n//   });\n\n//   return (\n//     <div align='center' className='storess'>\n//       <h2>Transactions for {shop ? shop.name : \"\"}</h2>\n//       {transactions.map((transaction) => (\n//         <div key={transaction.id}>\n//           <div><b>Client:</b> {transaction.client.name}</div>\n//           <div><b>Email:</b> {transaction.client.email}</div>\n//           <div><b>Total Amount:</b> ${transaction.total_amount.toFixed(2)}</div>\n//           {/* Add more details as needed */}\n//           <br />\n//           {/* Format date similar to ClientTransactions component */}\n//           <div><b>Date/Time:</b> {new Date(transaction.timestamp).toLocaleString('en-US', {\n//             year: 'numeric',\n//             month: 'numeric',\n//             day: 'numeric',\n//             hour: 'numeric',\n//             minute: 'numeric',\n//             hour12: true,\n//             timeZone: 'America/New_York',\n//           })}</div>\n//           <div>-----------------------------------------------------------------</div>\n//           <div>-------------------------------------------------------------------------</div>\n//           <br />\n//           <br />\n//         </div>\n//       ))}\n\n//       {goodsServicesWithCart.map((goodsService) => (\n//         <div key={goodsService.id}>\n//           <h3>{goodsService.name}</h3>\n//           <p>Price: ${goodsService.price.toFixed(2)}</p>\n//           {goodsService.cart && (\n//             <p>Cart Information: {/* Render cart details from goodsService.cart */}</p>\n//           )}\n//           <hr />\n//         </div>\n//       ))}\n//     </div>\n//   );\n// };\n\n// export default TransactionsByStore;\nvar _c;\n$RefreshReg$(_c, \"TransactionsByStore\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","TransactionsByStore","_s","shop","setShop","fetch","then","resp","ok","json","store","children","fileName","_jsxFileName","lineNumber","columnNumber","trans","transactions","allTransactions","clients","reduce","acc","client","concat","filtered","filter","transaction","total_amount","setFilteredTransactions","align","className","name","map","tran","email","id","_c","$RefreshReg$"],"sources":["/home/lebowski/Development/code/phase-5/project-community-connex/client/src/components/TransactionsByStore.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nconst TransactionsByStore = () => {\n\nconst [shop, setShop] = useState(null);\n\n  useEffect(() => {\n    fetch(\"/check_store_session\").then((resp) => {\n      if (resp.ok) {\n        resp.json().then((store) => setShop(store));\n      }\n    });\n  }, []);\n\n  // Check if shop is null or undefined\n  if (!shop) {\n    return <p>Loading...</p>; // You might want to display a loading indicator\n  }\n\n\n\n  // Check if transactions is null or undefined\n  const trans = shop.transactions || [];\n\n  useEffect(() => {\n    // Flatten the array of transactions for all clients\n    const allTransactions = clients.reduce((acc, client) => acc.concat(client.transactions), []);\n\n    // Now you can filter the transactions based on your criteria\n    const filtered = allTransactions.filter(transaction => {\n      // Your filtering logic here\n      // For example, filter transactions with a total amount greater than 500\n      return transaction.total_amount > 500;\n    });\n\n    setFilteredTransactions(filtered);\n  }, [clients]);\n\n  return (\n    <div align='center' className='storess'>\n      <h2>Transactions for {shop ? shop.name : \"\"}</h2>\n      <ul>\n        {trans.map((tran) => (\n          <p key={tran.id}>\n            <p>Client: {tran.client.name}</p>\n            <p>Email: {tran.client.email}</p>\n            <p>Total Amount: {tran.total_amount}</p>\n          </p>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default TransactionsByStore;\n\n//   const [shop, setShop] = useState(null);\n//   const [carts, setCarts] = useState(null);\n\n//   useEffect(() => {\n//     const fetchData = async () => {\n//       try {\n//         const response = await fetch(\"/check_store_session\");\n//         if (response.ok) {\n//           const store = await response.json();\n//           setShop(store);\n\n//           // Assuming there is a carts endpoint, fetch cart data here\n//           const cartsResponse = await fetch(\"/carts\");\n//           if (cartsResponse.ok) {\n//             const cartData = await cartsResponse.json();\n//             setCarts(cartData.carts);\n//           }\n//         }\n//       } catch (error) {\n//         console.error('Error fetching store data:', error);\n//       }\n//     };\n\n//     fetchData();\n//   }, []);\n\n//   // Check if shop or carts is null or undefined\n//   if (!shop || !carts) {\n//     return <p>Loading...</p>; // You might want to display a loading indicator\n//   }\n\n//   // Check if transactions is null or undefined\n//   const transactions = shop.transactions || [];\n//   console.log(shop.goods_services);\n\n//   // Map over goods_services and filter the cart by goods_service_id\n//   const goodsServicesWithCart = shop.goods_services.map((goodsService) => {\n//     const cartForGoodsService = carts.find((cart) => cart.goods_service_id === goodsService.id);\n//     return {\n//       ...goodsService,\n//       cart: cartForGoodsService || null,\n//     };\n//   });\n\n//   return (\n//     <div align='center' className='storess'>\n//       <h2>Transactions for {shop ? shop.name : \"\"}</h2>\n//       {transactions.map((transaction) => (\n//         <div key={transaction.id}>\n//           <div><b>Client:</b> {transaction.client.name}</div>\n//           <div><b>Email:</b> {transaction.client.email}</div>\n//           <div><b>Total Amount:</b> ${transaction.total_amount.toFixed(2)}</div>\n//           {/* Add more details as needed */}\n//           <br />\n//           {/* Format date similar to ClientTransactions component */}\n//           <div><b>Date/Time:</b> {new Date(transaction.timestamp).toLocaleString('en-US', {\n//             year: 'numeric',\n//             month: 'numeric',\n//             day: 'numeric',\n//             hour: 'numeric',\n//             minute: 'numeric',\n//             hour12: true,\n//             timeZone: 'America/New_York',\n//           })}</div>\n//           <div>-----------------------------------------------------------------</div>\n//           <div>-------------------------------------------------------------------------</div>\n//           <br />\n//           <br />\n//         </div>\n//       ))}\n\n//       {goodsServicesWithCart.map((goodsService) => (\n//         <div key={goodsService.id}>\n//           <h3>{goodsService.name}</h3>\n//           <p>Price: ${goodsService.price.toFixed(2)}</p>\n//           {goodsService.cart && (\n//             <p>Cart Information: {/* Render cart details from goodsService.cart */}</p>\n//           )}\n//           <hr />\n//         </div>\n//       ))}\n//     </div>\n//   );\n// };\n\n// export default TransactionsByStore;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}