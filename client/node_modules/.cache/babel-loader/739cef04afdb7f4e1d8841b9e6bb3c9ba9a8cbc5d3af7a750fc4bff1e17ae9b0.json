{"ast":null,"code":"var _jsxFileName = \"/home/lebowski/Development/code/phase-5/project-community-connex/client/src/components/Transactions.js\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Transactions({\n  trans,\n  clientId\n}) {\n  // Filter transactions based on the client_id\n  const clientTransactions = trans.filter(transaction => transaction.client_id = clientId);\n  const transactionDisplay = clientTransactions.map(tran => {\n    key = {};\n    store = {};\n    Email = {};\n    key = {};\n    key = {};\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Transactions:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }, this), clientTransactions.length > 0 ? clientTransactions.map(transaction => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Business:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 15\n        }, this), \" \", transaction.store ? transaction.store.name : \"N/A\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Email:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 15\n        }, this), \" \", transaction.store ? transaction.store.email : \"N/A\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Service Received:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 15\n        }, this), \" \", transaction.store && transaction.store.goods_services && transaction.store.goods_services.length > 0 ? transaction.store.goods_services[0].name : \"N/A\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Total Paid:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 15\n        }, this), \" $\", parseFloat(transaction.total_amount).toFixed(2)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 13\n      }, this)]\n    }, transaction.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 11\n    }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No transactions.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 5\n  }, this);\n}\n//     const formattedPrice = parseFloat(price).toFixed(2);\n\n//     return (\n//         <div align='center'>\n//            <p><h3><b>Business:</b></h3> {name}</p> \n//            <p><h3><b>Email:</b></h3> {email}</p> \n//            <p><h3><b>Service Recieved:</b></h3> {service}</p> \n//            <p><h3><b>Total Paid:</b></h3> ${formattedPrice}</p> \n//         </div>\n//     )\n// }\n_c = Transactions;\nvar _c;\n$RefreshReg$(_c, \"Transactions\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","Transactions","trans","clientId","clientTransactions","filter","transaction","client_id","transactionDisplay","map","tran","key","store","Email","children","fileName","_jsxFileName","lineNumber","columnNumber","length","name","email","goods_services","parseFloat","total_amount","toFixed","id","_c","$RefreshReg$"],"sources":["/home/lebowski/Development/code/phase-5/project-community-connex/client/src/components/Transactions.js"],"sourcesContent":["import React from \"react\";\n\nexport default function Transactions({trans, clientId}) {\n\n      // Filter transactions based on the client_id\n  const clientTransactions = trans.filter((transaction) => transaction.client_id = clientId);\n\n  const transactionDisplay = clientTransactions.map((tran) => {\n    key={}\n    store={}\n    Email={}\n    key={}\n    key={}\n  })\n\n  return (\n    <div>\n      <h3>Transactions:</h3>\n      {clientTransactions.length > 0 ? (\n        clientTransactions.map((transaction) => (\n          <div key={transaction.id}>\n            <p>\n              <strong>Business:</strong> {transaction.store ? transaction.store.name : \"N/A\"}\n            </p>\n            <p>\n              <strong>Email:</strong> {transaction.store ? transaction.store.email : \"N/A\"}\n            </p>\n            <p>\n              <strong>Service Received:</strong>{\" \"}\n              {transaction.store && transaction.store.goods_services && transaction.store.goods_services.length > 0\n                ? transaction.store.goods_services[0].name\n                : \"N/A\"}\n            </p>\n            <p>\n              <strong>Total Paid:</strong> ${parseFloat(transaction.total_amount).toFixed(2)}\n            </p>\n          </div>\n        ))\n      ) : (\n        <p>No transactions.</p>\n      )}\n    </div>\n  );\n}\n//     const formattedPrice = parseFloat(price).toFixed(2);\n\n//     return (\n//         <div align='center'>\n//            <p><h3><b>Business:</b></h3> {name}</p> \n//            <p><h3><b>Email:</b></h3> {email}</p> \n//            <p><h3><b>Service Recieved:</b></h3> {service}</p> \n//            <p><h3><b>Total Paid:</b></h3> ${formattedPrice}</p> \n//         </div>\n//     )\n// }\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}