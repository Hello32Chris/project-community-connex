{"ast":null,"code":"var _jsxFileName = \"/home/lebowski/Development/code/phase-5/project-community-connex/client/src/components/TransactionsByStore.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TransactionsByStore = () => {\n  _s();\n  const [shop, setShop] = useState(null);\n  useEffect(() => {\n    fetch(\"/check_store_session\").then(resp => {\n      if (resp.ok) {\n        resp.json().then(store => setShop(store));\n      }\n    });\n  }, []);\n\n  // Check if shop is null or undefined\n  if (!shop) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 12\n    }, this); // You might want to display a loading indicator\n  }\n\n  // Check if transactions is null or undefined\n  const trans = shop.transactions || [];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Transactions for \", shop ? shop.name : \"\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: trans.map(tran => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Total Amount: \", tran.total_amount]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Total Amount: \", tran.total_amount]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Total Amount: \", tran.total_amount]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 13\n        }, this)]\n      }, tran.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, this);\n};\n_s(TransactionsByStore, \"8f6C0oXVboepx2554EcUa2l48Xk=\");\n_c = TransactionsByStore;\nexport default TransactionsByStore;\n\n// import React, { useState, useEffect } from 'react';\n\n// const TransactionsByStore = ({ stores, loggedInStoreId }) => {\n\n//   const [transactions, setTransactions] = useState([]);\n//   const [shop, setShop] = useState(null);\n//   const [loading, setLoading] = useState(true);\n\n//   useEffect(() => {\n//     const fetchData = async () => {\n//       try {\n//         const matchedStore = stores.find(store => store.id === loggedInStoreId);\n\n//         if (!matchedStore) {\n//           // Handle the case where the store is not found\n//           console.error('Store not found for the logged-in ID:', loggedInStoreId);\n//           return;\n//         }\n\n//         const response = await fetch(`/transactions/${loggedInStoreId}`);\n//         const data = await response.json();\n\n//         // Return data and set them to states\n//         setShop(matchedStore);\n//         setTransactions(data.transactions);\n//       } catch (error) {\n//         console.error('Error fetching data:', error);\n//       } finally {\n//         setLoading(false);\n//       }\n//     };\n//     fetchData();\n//   }, [stores,loggedInStoreId]);\n\n//   if (loading) {\n//     return <p>Loading...</p>;\n//   }\n// // NEED TO CREAT ROUTE TO RECEIVE TRANSACTIONS BY STORE ID\n\n//   return (\n//     <div>\n//       <h2>Transactions for {shop ? shop.name : \"\"}</h2>\n//       <ul>\n//         {transactions.map((transaction) => (\n//           <li key={transaction.id}>\n//             {/* Render transaction details here */}\n//             <p>Total Amount: {transaction.total_amount}</p>\n//             {/* Add more details as needed */}\n//           </li>\n//         ))}\n//       </ul>\n//     </div>\n//   );\n// };\n\n// export default TransactionsByStore;\nvar _c;\n$RefreshReg$(_c, \"TransactionsByStore\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","TransactionsByStore","_s","shop","setShop","fetch","then","resp","ok","json","store","children","fileName","_jsxFileName","lineNumber","columnNumber","trans","transactions","name","map","tran","total_amount","id","_c","$RefreshReg$"],"sources":["/home/lebowski/Development/code/phase-5/project-community-connex/client/src/components/TransactionsByStore.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nconst TransactionsByStore = () => {\n  const [shop, setShop] = useState(null);\n\n  useEffect(() => {\n    fetch(\"/check_store_session\").then((resp) => {\n      if (resp.ok) {\n        resp.json().then((store) => setShop(store));\n      }\n    });\n  }, []);\n\n  // Check if shop is null or undefined\n  if (!shop) {\n    return <p>Loading...</p>; // You might want to display a loading indicator\n  }\n\n  // Check if transactions is null or undefined\n  const trans = shop.transactions || [];\n\n  return (\n    <div>\n      <h2>Transactions for {shop ? shop.name : \"\"}</h2>\n      <ul>\n        {trans.map((tran) => (\n          <li key={tran.id}>\n            {/* Render transaction details here */}\n            <p>Total Amount: {tran.total_amount}</p>\n            <p>Total Amount: {tran.total_amount}</p>\n            <p>Total Amount: {tran.total_amount}</p>\n            {/* Add more details as needed */}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default TransactionsByStore;\n\n\n\n// import React, { useState, useEffect } from 'react';\n\n// const TransactionsByStore = ({ stores, loggedInStoreId }) => {\n\n//   const [transactions, setTransactions] = useState([]);\n//   const [shop, setShop] = useState(null);\n//   const [loading, setLoading] = useState(true);\n\n//   useEffect(() => {\n//     const fetchData = async () => {\n//       try {\n//         const matchedStore = stores.find(store => store.id === loggedInStoreId);\n\n\n//         if (!matchedStore) {\n//           // Handle the case where the store is not found\n//           console.error('Store not found for the logged-in ID:', loggedInStoreId);\n//           return;\n//         }\n\n//         const response = await fetch(`/transactions/${loggedInStoreId}`);\n//         const data = await response.json();\n\n//         // Return data and set them to states\n//         setShop(matchedStore);\n//         setTransactions(data.transactions);\n//       } catch (error) {\n//         console.error('Error fetching data:', error);\n//       } finally {\n//         setLoading(false);\n//       }\n//     };\n//     fetchData();\n//   }, [stores,loggedInStoreId]);\n\n//   if (loading) {\n//     return <p>Loading...</p>;\n//   }\n// // NEED TO CREAT ROUTE TO RECEIVE TRANSACTIONS BY STORE ID\n\n//   return (\n//     <div>\n//       <h2>Transactions for {shop ? shop.name : \"\"}</h2>\n//       <ul>\n//         {transactions.map((transaction) => (\n//           <li key={transaction.id}>\n//             {/* Render transaction details here */}\n//             <p>Total Amount: {transaction.total_amount}</p>\n//             {/* Add more details as needed */}\n//           </li>\n//         ))}\n//       </ul>\n//     </div>\n//   );\n// };\n\n// export default TransactionsByStore;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,mBAAmB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChC,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC;EAEtCC,SAAS,CAAC,MAAM;IACdO,KAAK,CAAC,sBAAsB,CAAC,CAACC,IAAI,CAAEC,IAAI,IAAK;MAC3C,IAAIA,IAAI,CAACC,EAAE,EAAE;QACXD,IAAI,CAACE,IAAI,CAAC,CAAC,CAACH,IAAI,CAAEI,KAAK,IAAKN,OAAO,CAACM,KAAK,CAAC,CAAC;MAC7C;IACF,CAAC,CAAC;EACJ,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,IAAI,CAACP,IAAI,EAAE;IACT,oBAAOH,OAAA;MAAAW,QAAA,EAAG;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,CAAC,CAAC;EAC5B;;EAEA;EACA,MAAMC,KAAK,GAAGb,IAAI,CAACc,YAAY,IAAI,EAAE;EAErC,oBACEjB,OAAA;IAAAW,QAAA,gBACEX,OAAA;MAAAW,QAAA,GAAI,mBAAiB,EAACR,IAAI,GAAGA,IAAI,CAACe,IAAI,GAAG,EAAE;IAAA;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eACjDf,OAAA;MAAAW,QAAA,EACGK,KAAK,CAACG,GAAG,CAAEC,IAAI,iBACdpB,OAAA;QAAAW,QAAA,gBAEEX,OAAA;UAAAW,QAAA,GAAG,gBAAc,EAACS,IAAI,CAACC,YAAY;QAAA;UAAAT,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACxCf,OAAA;UAAAW,QAAA,GAAG,gBAAc,EAACS,IAAI,CAACC,YAAY;QAAA;UAAAT,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACxCf,OAAA;UAAAW,QAAA,GAAG,gBAAc,EAACS,IAAI,CAACC,YAAY;QAAA;UAAAT,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC;MAAA,GAJjCK,IAAI,CAACE,EAAE;QAAAV,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAMZ,CACL;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAEV,CAAC;AAACb,EAAA,CAnCID,mBAAmB;AAAAsB,EAAA,GAAnBtB,mBAAmB;AAqCzB,eAAeA,mBAAmB;;AAIlC;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}