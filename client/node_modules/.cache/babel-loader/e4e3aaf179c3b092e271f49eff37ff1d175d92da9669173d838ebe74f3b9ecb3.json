{"ast":null,"code":"// import React, { useState, useEffect } from \"react\";\n// import RegisterPage from \"./RegisterPage\";\n\n// export default function CartCard() {\n\n//     const [client, setClient] = useState({})\n//     const [carts, setCarts] = useState([]);\n//     const [filteredCarts, setFilteredCarts] = useState([]);\n//     const [goods, setGoods] = useState([]);\n//     const [clientGoods, setClientGoods] = useState([]);\n\n//     //------------------------------------------------------- CARTS FETCH --------------------\n//     useEffect(() => {\n//         const fetchCarts = () => {\n//             fetch('/carts')\n//                 .then((response) => {\n//                     if (!response.ok) {\n//                         throw new Error('Failed to fetch cart data');\n//                     }\n//                     return response.json();\n//                 })\n//                 .then((data) => {\n//                     setCarts(data.carts);\n//                 })\n//                 .catch((error) => {\n//                     console.error(error.message);\n//                 });\n//         };\n\n//         fetchCarts();\n//     }, [client.id]);\n//     //--------------------------------------------------------- CHECK CLIENT SESSION ---------------------\n//     useEffect(() => {\n//         fetch(\"/check_client_session\").then((resp) => {\n//             if (resp.ok) {\n//                 resp.json().then(setClient);\n//             }\n//         });\n//     }, []);\n\n//     //------------------------------------------------------------ GOODS SERVICES FETCH --------------------\n//     useEffect(() => {\n//         fetch('/goods')\n//             .then((response) => response.json())\n//             .then((data) => {\n//                 console.log(data)\n//                 setGoods(data);\n//             })\n//             .catch((error) => {\n//                 console.error('Error fetching goods:', error);\n//             });\n//     }, []);\n\n//     const mappedGoods = goods.map((good) => {\n//         const id = good.id\n//         const name = good.name\n//         const price = good.price\n//         return { id, name, price }\n//     })\n\n//     console.log(mappedGoods)\n\n//     //-------------------------------------------------------------------- FETCH CART BASED ON CLIENT SESSION ---------------------------------\n//     const clientId = client?.id\n\n//     useEffect(() => {\n//         if (clientId) {\n//             // Filter carts based on clientId\n//             const clientCarts = carts.filter((cart) => cart.client_id === clientId);\n//             setFilteredCarts(clientCarts);\n//         }\n//     }, [clientId, carts]);\n\n// //----------------------------------------------------------------------------------- FILTER THROUGH CARTS BY GOODS ID ------\n//     useEffect(() => {\n//         if (filteredCarts.length > 0 && goods.length > 0) {\n//             // Filter goods based on goods_service_id in filteredCarts\n//             const goodsInCarts = filteredCarts.map((cart) =>\n//                 goods.find((good) => good.id === cart.goods_service_id)\n//             );\n//             setClientGoods(goodsInCarts);\n//         }\n//     }, [filteredCarts, goods]);\n\n//     console.log(clientGoods)\n//     //------------------------------------------------------------------ DELETE CART ITEMS -------------------\n//     const handleDeleteCartItems = async (goods_id) => {\n//         try {\n//             const response = await fetch('/delete_cart_items', {\n//                 method: 'POST',\n//                 headers: {\n//                     'Content-Type': 'application/json',\n//                 },\n//                 body: JSON.stringify({ clientId, goods_id }),\n//             });\n\n//             if (response.ok) {\n//                 console.log('Cart items deleted successfully');\n//                 alert('Cart item deleted!')\n//                 // You can perform additional actions if needed\n//             } else {\n//                 console.error('Failed to delete cart items');\n//             }\n//         } catch (error) {\n//             console.error('Error during cart item deletion:', error);\n//         }\n//     };\n\n//     const cartDisplay = clientGoods.map((good) =>\n//         <div key={good.id}>\n//             <div>Service -{good.name}</div>\n//             <div>Price - {good.price}</div>\n\n//             <button onClick={() => handleDeleteCartItems(good.id)} >Remove Cart Item</button>\n//             <br />\n//             <br />\n//         </div>\n//     )\n\n//     // console.log(filteredCarts)\n//     // console.log(clientId)\n//     // console.log(goods)\n\n//     return (\n//         <div align='center' id=\"cart\">\n//             {cartDisplay}\n//         </div>\n//     )\n// }","map":{"version":3,"names":[],"sources":["/home/lebowski/Development/code/phase-5/project-community-connex/client/src/components/CartCard.js"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\n// import RegisterPage from \"./RegisterPage\";\n\n\n// export default function CartCard() {\n\n//     const [client, setClient] = useState({})\n//     const [carts, setCarts] = useState([]);\n//     const [filteredCarts, setFilteredCarts] = useState([]);\n//     const [goods, setGoods] = useState([]);\n//     const [clientGoods, setClientGoods] = useState([]);\n\n\n//     //------------------------------------------------------- CARTS FETCH --------------------\n//     useEffect(() => {\n//         const fetchCarts = () => {\n//             fetch('/carts')\n//                 .then((response) => {\n//                     if (!response.ok) {\n//                         throw new Error('Failed to fetch cart data');\n//                     }\n//                     return response.json();\n//                 })\n//                 .then((data) => {\n//                     setCarts(data.carts);\n//                 })\n//                 .catch((error) => {\n//                     console.error(error.message);\n//                 });\n//         };\n\n//         fetchCarts();\n//     }, [client.id]);\n//     //--------------------------------------------------------- CHECK CLIENT SESSION ---------------------\n//     useEffect(() => {\n//         fetch(\"/check_client_session\").then((resp) => {\n//             if (resp.ok) {\n//                 resp.json().then(setClient);\n//             }\n//         });\n//     }, []);\n\n\n//     //------------------------------------------------------------ GOODS SERVICES FETCH --------------------\n//     useEffect(() => {\n//         fetch('/goods')\n//             .then((response) => response.json())\n//             .then((data) => {\n//                 console.log(data)\n//                 setGoods(data);\n//             })\n//             .catch((error) => {\n//                 console.error('Error fetching goods:', error);\n//             });\n//     }, []);\n\n//     const mappedGoods = goods.map((good) => {\n//         const id = good.id\n//         const name = good.name\n//         const price = good.price\n//         return { id, name, price }\n//     })\n\n//     console.log(mappedGoods)\n\n//     //-------------------------------------------------------------------- FETCH CART BASED ON CLIENT SESSION ---------------------------------\n//     const clientId = client?.id\n\n//     useEffect(() => {\n//         if (clientId) {\n//             // Filter carts based on clientId\n//             const clientCarts = carts.filter((cart) => cart.client_id === clientId);\n//             setFilteredCarts(clientCarts);\n//         }\n//     }, [clientId, carts]);\n\n// //----------------------------------------------------------------------------------- FILTER THROUGH CARTS BY GOODS ID ------\n//     useEffect(() => {\n//         if (filteredCarts.length > 0 && goods.length > 0) {\n//             // Filter goods based on goods_service_id in filteredCarts\n//             const goodsInCarts = filteredCarts.map((cart) =>\n//                 goods.find((good) => good.id === cart.goods_service_id)\n//             );\n//             setClientGoods(goodsInCarts);\n//         }\n//     }, [filteredCarts, goods]);\n\n\n//     console.log(clientGoods)\n//     //------------------------------------------------------------------ DELETE CART ITEMS -------------------\n//     const handleDeleteCartItems = async (goods_id) => {\n//         try {\n//             const response = await fetch('/delete_cart_items', {\n//                 method: 'POST',\n//                 headers: {\n//                     'Content-Type': 'application/json',\n//                 },\n//                 body: JSON.stringify({ clientId, goods_id }),\n//             });\n\n//             if (response.ok) {\n//                 console.log('Cart items deleted successfully');\n//                 alert('Cart item deleted!')\n//                 // You can perform additional actions if needed\n//             } else {\n//                 console.error('Failed to delete cart items');\n//             }\n//         } catch (error) {\n//             console.error('Error during cart item deletion:', error);\n//         }\n//     };\n\n\n//     const cartDisplay = clientGoods.map((good) =>\n//         <div key={good.id}>\n//             <div>Service -{good.name}</div>\n//             <div>Price - {good.price}</div>\n        \n//             <button onClick={() => handleDeleteCartItems(good.id)} >Remove Cart Item</button>\n//             <br />\n//             <br />\n//         </div>\n//     )\n\n\n\n//     // console.log(filteredCarts)\n//     // console.log(clientId)\n//     // console.log(goods)\n\n\n\n\n//     return (\n//         <div align='center' id=\"cart\">\n//             {cartDisplay}\n//         </div>\n//     )\n// }\n\n"],"mappings":"AAAA;AACA;;AAGA;;AAEA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;;AAKA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}