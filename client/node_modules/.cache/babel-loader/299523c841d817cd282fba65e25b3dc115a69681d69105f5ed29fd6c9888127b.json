{"ast":null,"code":"var _jsxFileName = \"/home/lebowski/Development/code/phase-5/project-community-connex/client/src/components/StoreAcctPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport StoreCard from \"./StoreCard\";\nimport TransactionsByStore from \"./TransactionsByStore\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function StoreAcctPage({\n  stores\n}) {\n  _s();\n  // const store = stores.map((store) => {\n  //   return <StoreCard key={store.id}\n  //      name={store.name}\n  //      email={store.email}\n  //      goodsNservices={store.goods_services}\n  //      transactions={store.transactions}\n\n  //   />\n  // })\n  const [store, setStore] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    const fetchStoreData = async () => {\n      try {\n        // Retrieve the logged-in store ID from session storage\n        const loggedInStoreId = sessionStorage.getItem('store_id');\n        if (!loggedInStoreId) {\n          // Handle the case where store ID is not available in session storage\n          return;\n        }\n\n        // Fetch the store data based on the logged-in store ID\n        const response = await fetch(`/stores/${loggedInStoreId}`);\n        const data = await response.json();\n        setStore(data);\n      } catch (error) {\n        console.error('Error fetching store data:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchStoreData();\n  }, []);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 14\n    }, this);\n  }\n  if (!store) {\n    // Handle the case where store data is not available\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Store data not found.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 14\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Welcome to the Store Dashboard, \", store.name, \"!\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Store Name: \", store.name]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(TransactionsByStore, {\n      storeId: store.id\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 7\n  }, this);\n}\n_s(StoreAcctPage, \"vpOJk5Ua2tooB67B5OYl9fmYwCY=\");\n_c = StoreAcctPage;\n;\nvar _c;\n$RefreshReg$(_c, \"StoreAcctPage\");","map":{"version":3,"names":["React","useState","useEffect","StoreCard","TransactionsByStore","jsxDEV","_jsxDEV","StoreAcctPage","stores","_s","store","setStore","loading","setLoading","fetchStoreData","loggedInStoreId","sessionStorage","getItem","response","fetch","data","json","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","name","storeId","id","_c","$RefreshReg$"],"sources":["/home/lebowski/Development/code/phase-5/project-community-connex/client/src/components/StoreAcctPage.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport StoreCard from \"./StoreCard\";\nimport TransactionsByStore from \"./TransactionsByStore\";\n\n\nexport default function StoreAcctPage({ stores }) {\n  \n\n  // const store = stores.map((store) => {\n  //   return <StoreCard key={store.id}\n  //      name={store.name}\n  //      email={store.email}\n  //      goodsNservices={store.goods_services}\n  //      transactions={store.transactions}\n    \n  //   />\n  // })\n    const [store, setStore] = useState(null);\n    const [loading, setLoading] = useState(true);\n  \n    useEffect(() => {\n      const fetchStoreData = async () => {\n        try {\n          // Retrieve the logged-in store ID from session storage\n          const loggedInStoreId = sessionStorage.getItem('store_id');\n  \n          if (!loggedInStoreId) {\n            // Handle the case where store ID is not available in session storage\n            return;\n          }\n  \n          // Fetch the store data based on the logged-in store ID\n          const response = await fetch(`/stores/${loggedInStoreId}`);\n          const data = await response.json();\n  \n          setStore(data);\n        } catch (error) {\n          console.error('Error fetching store data:', error);\n        } finally {\n          setLoading(false);\n        }\n      };\n  \n      fetchStoreData();\n    }, []);\n  \n    if (loading) {\n      return <p>Loading...</p>;\n    }\n  \n    if (!store) {\n      // Handle the case where store data is not available\n      return <p>Store data not found.</p>;\n    }\n\n\n    return (\n      <div>\n        <h2>Welcome to the Store Dashboard, {store.name}!</h2>\n        <p>Store Name: {store.name}</p>\n        <TransactionsByStore storeId={store.id} />\n        {/* Add more components or details as needed */}\n      </div>\n    );\n  };\n\n\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,SAAS,MAAM,aAAa;AACnC,OAAOC,mBAAmB,MAAM,uBAAuB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAGxD,eAAe,SAASC,aAAaA,CAAC;EAAEC;AAAO,CAAC,EAAE;EAAAC,EAAA;EAGhD;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACE,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACW,OAAO,EAAEC,UAAU,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EAE5CC,SAAS,CAAC,MAAM;IACd,MAAMY,cAAc,GAAG,MAAAA,CAAA,KAAY;MACjC,IAAI;QACF;QACA,MAAMC,eAAe,GAAGC,cAAc,CAACC,OAAO,CAAC,UAAU,CAAC;QAE1D,IAAI,CAACF,eAAe,EAAE;UACpB;UACA;QACF;;QAEA;QACA,MAAMG,QAAQ,GAAG,MAAMC,KAAK,CAAE,WAAUJ,eAAgB,EAAC,CAAC;QAC1D,MAAMK,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;QAElCV,QAAQ,CAACS,IAAI,CAAC;MAChB,CAAC,CAAC,OAAOE,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MACpD,CAAC,SAAS;QACRT,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IAEDC,cAAc,CAAC,CAAC;EAClB,CAAC,EAAE,EAAE,CAAC;EAEN,IAAIF,OAAO,EAAE;IACX,oBAAON,OAAA;MAAAkB,QAAA,EAAG;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC;EAC1B;EAEA,IAAI,CAAClB,KAAK,EAAE;IACV;IACA,oBAAOJ,OAAA;MAAAkB,QAAA,EAAG;IAAqB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC;EACrC;EAGA,oBACEtB,OAAA;IAAAkB,QAAA,gBACElB,OAAA;MAAAkB,QAAA,GAAI,kCAAgC,EAACd,KAAK,CAACmB,IAAI,EAAC,GAAC;IAAA;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACtDtB,OAAA;MAAAkB,QAAA,GAAG,cAAY,EAACd,KAAK,CAACmB,IAAI;IAAA;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC/BtB,OAAA,CAACF,mBAAmB;MAAC0B,OAAO,EAAEpB,KAAK,CAACqB;IAAG;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEvC,CAAC;AAEV;AAACnB,EAAA,CA3DqBF,aAAa;AAAAyB,EAAA,GAAbzB,aAAa;AA2DlC;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}