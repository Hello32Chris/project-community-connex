{"ast":null,"code":"var _jsxFileName = \"/home/lebowski/Development/code/phase-5/project-community-connex/client/src/components/SubscribeButton.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function SubscribeButton({\n  storecode,\n  storeid\n}) {\n  _s();\n  const [subToggle, setSubToggle] = useState(false);\n  const [getsubs, setSubs] = useState([]);\n  const [client, setclient] = useState([]);\n\n  //------------------------------------------------------------------ CLIENT CHECK SESSION -------------------------\n  useEffect(() => {\n    fetch(\"/check_client_session\").then(resp => {\n      if (resp.ok) {\n        resp.json().then(setclient);\n      }\n    });\n  }, []);\n\n  //------------------------------------------------------------- SUBSCRIPTION LOGIC --------------------------------------------\n  const subStores = (client === null || client === void 0 ? void 0 : client.subscribed_stores) || [];\n  const mappedStoreIds = subStores.map(store => {\n    const id = store.id;\n    return id;\n  });\n  //------------------------------------------ if the store id is already in the clients subscriptions toggle the subscribe buttons to say unsubscribe ----------------------\n  const checkSub = useEffect(() => {\n    if (mappedStoreIds.includes(storeid)) setSubToggle(true);\n  }, [mappedStoreIds, storeid]);\n  const handleSubscribe = async () => {\n    try {\n      const response = await fetch('/subscribe', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          store_code: storecode\n        })\n      });\n      if (response.ok) {\n        const data = await response.json();\n        setSubToggle(true);\n        // Handle successful subscription\n        console.log(data.message);\n        setSubscribed(true);\n        // Notify the parent component that a subscription has occurred\n      } else {\n        // Handle errors\n        const errorData = await response.json();\n        console.error('Failed to subscribe:', errorData.error);\n      }\n    } catch (error) {\n      console.error('Error during subscription:', error.message);\n    }\n  };\n  if (!client) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 16\n    }, this); // You might want to display a loading indicator\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    align: \"center\",\n    children: [checkSub, /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSubscribe,\n      children: subToggle ? 'Unsubscribe' : 'Subscribe'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 9\n  }, this);\n}\n_s(SubscribeButton, \"gomA3iS0W0OSEefBb54O0I+hhZI=\");\n_c = SubscribeButton;\nvar _c;\n$RefreshReg$(_c, \"SubscribeButton\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","SubscribeButton","storecode","storeid","_s","subToggle","setSubToggle","getsubs","setSubs","client","setclient","fetch","then","resp","ok","json","subStores","subscribed_stores","mappedStoreIds","map","store","id","checkSub","includes","handleSubscribe","response","method","headers","body","JSON","stringify","store_code","data","console","log","message","setSubscribed","errorData","error","children","fileName","_jsxFileName","lineNumber","columnNumber","align","onClick","_c","$RefreshReg$"],"sources":["/home/lebowski/Development/code/phase-5/project-community-connex/client/src/components/SubscribeButton.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\n\n\n\nexport default function SubscribeButton({ storecode, storeid }) {\n\n    const [subToggle, setSubToggle] = useState(false)\n    const [getsubs, setSubs] = useState([])\n    const [client, setclient] = useState([])\n\n\n    //------------------------------------------------------------------ CLIENT CHECK SESSION -------------------------\n    useEffect(() => {\n        fetch(\"/check_client_session\").then((resp) => {\n            if (resp.ok) {\n                resp.json().then(setclient);\n            }\n        });\n    }, []);\n\n\n\n    //------------------------------------------------------------- SUBSCRIPTION LOGIC --------------------------------------------\n    const subStores = client?.subscribed_stores || []\n    const mappedStoreIds = subStores.map((store) => {\n        const id = store.id\n        return id\n    })\n    //------------------------------------------ if the store id is already in the clients subscriptions toggle the subscribe buttons to say unsubscribe ----------------------\n    const checkSub = useEffect(() => {\n        if (mappedStoreIds.includes(storeid))\n            setSubToggle(true)\n    }, [mappedStoreIds, storeid])\n\n    \n    \n    \n    const handleSubscribe = async () => {\n        try {\n            const response = await fetch('/subscribe', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({ store_code: storecode }),\n            });\n            if (response.ok) {\n                const data = await response.json();\n                setSubToggle(true)\n                // Handle successful subscription\n                console.log(data.message);\n                setSubscribed(true);\n                // Notify the parent component that a subscription has occurred\n            } else {\n                // Handle errors\n                const errorData = await response.json();\n                console.error('Failed to subscribe:', errorData.error);\n            }\n        } catch (error) {\n            console.error('Error during subscription:', error.message);\n        }\n    };\n    \n    if (!client) {\n        return <p>Loading...</p>; // You might want to display a loading indicator\n    }\n    \n    \n    return (\n        <div align='center'>\n            {checkSub}\n            <button onClick={(handleSubscribe)} >\n                {subToggle ? 'Unsubscribe' : 'Subscribe'}\n            </button>\n        </div>\n    )\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}