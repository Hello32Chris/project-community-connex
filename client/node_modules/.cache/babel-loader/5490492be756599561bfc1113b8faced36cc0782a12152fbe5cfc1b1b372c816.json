{"ast":null,"code":"// import React, { useState, useEffect } from 'react';\n\n// const TransactionsByStore = ({ stores, loggedInStoreId }) => {\n\n//   const [transactions, setTransactions] = useState([]);\n//   const [shop, setShop] = useState(null);\n//   const [loading, setLoading] = useState(true);\n\n//   useEffect(() => {\n//     const fetchData = async () => {\n//       try {\n//         const matchedStore = stores.find(store => store.id === loggedInStoreId);\n\n//         if (!matchedStore) {\n//           // Handle the case where the store is not found\n//           console.error('Store not found for the logged-in ID:', loggedInStoreId);\n//           return;\n//         }\n\n//         const response = await fetch(`/transactions/${loggedInStoreId}`);\n//         const data = await response.json();\n\n//         // Return data and set them to states\n//         setShop(matchedStore);\n//         setTransactions(data.transactions);\n//       } catch (error) {\n//         console.error('Error fetching data:', error);\n//       } finally {\n//         setLoading(false);\n//       }\n//     };\n//     fetchData();\n//   }, [stores,loggedInStoreId]);\n\n//   if (loading) {\n//     return <p>Loading...</p>;\n//   }\n// // NEED TO CREAT ROUTE TO RECEIVE TRANSACTIONS BY STORE ID\n\n//   return (\n//     <div>\n//       <h2>Transactions for {shop ? shop.name : \"\"}</h2>\n//       <ul>\n//         {transactions.map((transaction) => (\n//           <li key={transaction.id}>\n//             {/* Render transaction details here */}\n//             <p>Total Amount: {transaction.total_amount}</p>\n//             {/* Add more details as needed */}\n//           </li>\n//         ))}\n//       </ul>\n//     </div>\n//   );\n// };\n\nexport default TransactionsByStore;","map":{"version":3,"names":["TransactionsByStore"],"sources":["/home/lebowski/Development/code/phase-5/project-community-connex/client/src/components/TransactionsByStore.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\n\n// const TransactionsByStore = ({ stores, loggedInStoreId }) => {\n\n//   const [transactions, setTransactions] = useState([]);\n//   const [shop, setShop] = useState(null);\n//   const [loading, setLoading] = useState(true);\n\n//   useEffect(() => {\n//     const fetchData = async () => {\n//       try {\n//         const matchedStore = stores.find(store => store.id === loggedInStoreId);\n        \n\n//         if (!matchedStore) {\n//           // Handle the case where the store is not found\n//           console.error('Store not found for the logged-in ID:', loggedInStoreId);\n//           return;\n//         }\n\n//         const response = await fetch(`/transactions/${loggedInStoreId}`);\n//         const data = await response.json();\n\n//         // Return data and set them to states\n//         setShop(matchedStore);\n//         setTransactions(data.transactions);\n//       } catch (error) {\n//         console.error('Error fetching data:', error);\n//       } finally {\n//         setLoading(false);\n//       }\n//     };\n//     fetchData();\n//   }, [stores,loggedInStoreId]);\n\n//   if (loading) {\n//     return <p>Loading...</p>;\n//   }\n// // NEED TO CREAT ROUTE TO RECEIVE TRANSACTIONS BY STORE ID\n\n//   return (\n//     <div>\n//       <h2>Transactions for {shop ? shop.name : \"\"}</h2>\n//       <ul>\n//         {transactions.map((transaction) => (\n//           <li key={transaction.id}>\n//             {/* Render transaction details here */}\n//             <p>Total Amount: {transaction.total_amount}</p>\n//             {/* Add more details as needed */}\n//           </li>\n//         ))}\n//       </ul>\n//     </div>\n//   );\n// };\n\nexport default TransactionsByStore;"],"mappings":"AAAA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAeA,mBAAmB"},"metadata":{},"sourceType":"module","externalDependencies":[]}