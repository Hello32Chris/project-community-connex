{"ast":null,"code":"var _jsxFileName = \"/home/lebowski/Development/code/phase-5/project-community-connex/client/src/components/StoreAcctPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport StoreCard from \"./StoreCard\";\nimport TransactionsByStore from \"./TransactionsByStore\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function StoreAcctPage({\n  stores\n}) {\n  _s();\n  const loggedInStoreId = sessionStorage.getItem('store_id');\n  const [store, setStore] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    const fetchStoreData = async () => {\n      try {\n        if (loggedInStoreId) {\n          // Filter the stores array based on the logged-in store ID\n          const filteredStores = stores.filter(store => store.id === parseInt(loggedInStoreId));\n\n          // Check if the filteredStores array has any items\n          if (filteredStores.length > 0) {\n            // Assuming there's only one store with the given ID, set it as the store\n            setStore(filteredStores[0]);\n          } else {\n            console.warn('Store not found with the provided ID.');\n          }\n        } else {\n          console.warn('No store ID available.');\n        }\n      } catch (error) {\n        console.error('Error fetching store data:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchStoreData();\n  }, [loggedInStoreId, stores]);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 12\n    }, this);\n  }\n  if (!store) {\n    // Handle the case where store data is not available\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Store data not found.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Welcome to the Store Dashboard, \", store.name, \"!\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Store Name: \", store.name]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TransactionsByStore, {\n      storename: store.name,\n      storeId: store.id\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n}\n_s(StoreAcctPage, \"vpOJk5Ua2tooB67B5OYl9fmYwCY=\");\n_c = StoreAcctPage;\n;\nvar _c;\n$RefreshReg$(_c, \"StoreAcctPage\");","map":{"version":3,"names":["React","useState","useEffect","StoreCard","TransactionsByStore","jsxDEV","_jsxDEV","StoreAcctPage","stores","_s","loggedInStoreId","sessionStorage","getItem","store","setStore","loading","setLoading","fetchStoreData","filteredStores","filter","id","parseInt","length","console","warn","error","children","fileName","_jsxFileName","lineNumber","columnNumber","name","storename","storeId","_c","$RefreshReg$"],"sources":["/home/lebowski/Development/code/phase-5/project-community-connex/client/src/components/StoreAcctPage.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport StoreCard from \"./StoreCard\";\nimport TransactionsByStore from \"./TransactionsByStore\";\n\n\nexport default function StoreAcctPage({ stores }) {\n  const loggedInStoreId = sessionStorage.getItem('store_id');\n  const [store, setStore] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const fetchStoreData = async () => {\n      try {\n        if (loggedInStoreId) {\n          // Filter the stores array based on the logged-in store ID\n          const filteredStores = stores.filter((store) => store.id === parseInt(loggedInStoreId));\n\n          // Check if the filteredStores array has any items\n          if (filteredStores.length > 0) {\n            // Assuming there's only one store with the given ID, set it as the store\n            setStore(filteredStores[0]);\n          } else {\n            console.warn('Store not found with the provided ID.');\n          }\n        } else {\n          console.warn('No store ID available.');\n        }\n      } catch (error) {\n        console.error('Error fetching store data:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchStoreData();\n  }, [loggedInStoreId, stores]);\n\n  if (loading) {\n    return <p>Loading...</p>;\n  }\n\n  if (!store) {\n    // Handle the case where store data is not available\n    return <p>Store data not found.</p>;\n  }\n\n\n\n\n  return (\n    <div>\n      <h2>Welcome to the Store Dashboard, {store.name}!</h2>\n      <p>Store Name: {store.name}</p>\n      <TransactionsByStore storename={store.name} storeId={store.id} />\n      {/* Add more components or details as needed */}\n    </div>\n  );\n};\n\n\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,SAAS,MAAM,aAAa;AACnC,OAAOC,mBAAmB,MAAM,uBAAuB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAGxD,eAAe,SAASC,aAAaA,CAAC;EAAEC;AAAO,CAAC,EAAE;EAAAC,EAAA;EAChD,MAAMC,eAAe,GAAGC,cAAc,CAACC,OAAO,CAAC,UAAU,CAAC;EAC1D,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACc,OAAO,EAAEC,UAAU,CAAC,GAAGf,QAAQ,CAAC,IAAI,CAAC;EAE5CC,SAAS,CAAC,MAAM;IACd,MAAMe,cAAc,GAAG,MAAAA,CAAA,KAAY;MACjC,IAAI;QACF,IAAIP,eAAe,EAAE;UACnB;UACA,MAAMQ,cAAc,GAAGV,MAAM,CAACW,MAAM,CAAEN,KAAK,IAAKA,KAAK,CAACO,EAAE,KAAKC,QAAQ,CAACX,eAAe,CAAC,CAAC;;UAEvF;UACA,IAAIQ,cAAc,CAACI,MAAM,GAAG,CAAC,EAAE;YAC7B;YACAR,QAAQ,CAACI,cAAc,CAAC,CAAC,CAAC,CAAC;UAC7B,CAAC,MAAM;YACLK,OAAO,CAACC,IAAI,CAAC,uCAAuC,CAAC;UACvD;QACF,CAAC,MAAM;UACLD,OAAO,CAACC,IAAI,CAAC,wBAAwB,CAAC;QACxC;MACF,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdF,OAAO,CAACE,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MACpD,CAAC,SAAS;QACRT,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IAEDC,cAAc,CAAC,CAAC;EAClB,CAAC,EAAE,CAACP,eAAe,EAAEF,MAAM,CAAC,CAAC;EAE7B,IAAIO,OAAO,EAAE;IACX,oBAAOT,OAAA;MAAAoB,QAAA,EAAG;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC;EAC1B;EAEA,IAAI,CAACjB,KAAK,EAAE;IACV;IACA,oBAAOP,OAAA;MAAAoB,QAAA,EAAG;IAAqB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC;EACrC;EAKA,oBACExB,OAAA;IAAAoB,QAAA,gBACEpB,OAAA;MAAAoB,QAAA,GAAI,kCAAgC,EAACb,KAAK,CAACkB,IAAI,EAAC,GAAC;IAAA;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACtDxB,OAAA;MAAAoB,QAAA,GAAG,cAAY,EAACb,KAAK,CAACkB,IAAI;IAAA;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC/BxB,OAAA,CAACF,mBAAmB;MAAC4B,SAAS,EAAEnB,KAAK,CAACkB,IAAK;MAACE,OAAO,EAAEpB,KAAK,CAACO;IAAG;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAE9D,CAAC;AAEV;AAACrB,EAAA,CApDuBF,aAAa;AAAA2B,EAAA,GAAb3B,aAAa;AAoDpC;AAAC,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}